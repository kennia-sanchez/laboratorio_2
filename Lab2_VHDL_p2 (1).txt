LIBRARY ieee;
USE ieee.std_logic_1164.all;


ENTITY part2 IS 
   PORT ( SW         : IN  STD_LOGIC_VECTOR(9 DOWNTO 0);
          LEDR       : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
          HEX1, HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0));   
END part2;

ARCHITECTURE Behavior OF part2 IS

   COMPONENT mux2to1_4bit
        PORT(  X,  Y :  IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
	            s     :  IN  STD_LOGIC;
			      M     :  OUT STD_LOGIC_VECTOR(3 DOWNTO 0)  );
   END COMPONENT;
   
   COMPONENT bcd7seg2
            PORT ( B : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
                   H : OUT STD_LOGIC_VECTOR(6 DOWNTO 0));
	END COMPONENT;
   
   SIGNAL V, A, M : STD_LOGIC_VECTOR(3 DOWNTO 0);
   SIGNAL z       : STD_LOGIC;
	
BEGIN


--           V        H1      H0          z      A
--        -----------------------------------------------------
--         0000       0        1          0      x
--         0001       0        2          0      x
--         ...
--         1001       0        9          0      x
--
--         1010       1        0          1     0000
--         1011       1        1          1     0001
--         1100       1        2          1     0010
--         1101       1        3          1     0011
--         1110       1        4          1     0100
--         1111       1        5          1     0101



   LEDR(9  DOWNto 4)  <= "000000";
	LEDR(3  DOWNto 0)  <= SW(3  DOWNto 0);
	
	V  <= SW(3  DOWNto 0);
	
	Z <= (V(3) AND V(2))  OR   (V(3) AND V(1));
   	
   A(3) <=  '0';
	A(2) <=  (V(2) AND V(1));
	A(1) <=  (V(2) AND NOT(V(1)));
	A(0) <=  (V(1) AND V(0))  OR   (V(2) AND V(0));
	
	
	U0:  mux2to1_4bit PORT MAP (V, A, z, M);
	
	H1:  bcd7seg2 PORT MAP (("000" &  z), HEX1);
   H0:  bcd7seg2 PORT MAP (M, HEX0);

END Behavior;







LIBRARY ieee;
USE ieee.std_logic_1164.all;
--   .-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-.
--  (                                               )
--   )   4bits       2  to 1                       (
--  (                                               )
--   ._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.
ENTITY mux2to1_4bit IS
   PORT(  X,  Y :  IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
	       s     :  IN  STD_LOGIC;
			 M     :  OUT STD_LOGIC_VECTOR(3 DOWNTO 0)  );
END mux2to1_4bit;

ARCHITECTURE Behavior OF mux2to1_4bit IS
BEGIN
   M(0)  <= (NOT(s) AND X(0)) OR ( s AND Y(0));
	M(1)  <= (NOT(s) AND X(1)) OR ( s AND Y(1));
	M(2)  <= (NOT(s) AND X(2)) OR ( s AND Y(2));
	M(3)  <= (NOT(s) AND X(3)) OR ( s AND Y(3));
END Behavior;












LIBRARY ieee;
USE ieee.std_logic_1164.all;

--   .-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-.
--  (                                               )
--   )   BCD to 7 Segment Display Decoder          (
--  (                                               )
--   ._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.

ENTITY bcd7seg2 IS
   PORT ( B : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
          H : OUT STD_LOGIC_VECTOR(6 DOWNTO 0));
END bcd7seg2;

ARCHITECTURE Behavior OF bcd7seg2 IS
BEGIN
   --                           B        H
   --       0                ----------------
   --      ---                0000    0000001
   --     |   |               0001    1001111
   --    5|   |1              0010    0010010
   --     | 6 |               0011    0000110
   --      ---                0100    1001100
   --     |   |               0101    0100100
   --    4|   |2              0110    0100000
   --     |   |               0111    0001111
   --      ---                1000    0000000
   --       3                 1001    0000100
   --

   H(0) <= (NOT(B(3)) AND B(2) AND NOT(B(1)) AND NOT(B(0))) OR 
           (NOT(B(3)) AND NOT(B(2)) AND NOT(B(1)) AND B(0));
   H(1) <= (B(2) AND NOT(B(1)) AND B(0)) OR
           (B(2) AND B(1) AND NOT(B(0)));
   H(2) <= (NOT(B(2)) AND B(1) AND NOT(B(0)));
   H(3) <= (NOT(B(3)) AND NOT(B(2)) AND NOT(B(1)) AND B(0)) OR 
           (NOT(B(3)) AND B(2) AND NOT(B(1)) AND NOT(B(0))) OR (NOT(B(3)) AND B(2) AND B(1) AND B(0));
   H(4) <= (NOT(B(1)) AND B(0)) OR (NOT(B(3)) AND B(0)) OR 
           (NOT(B(3)) AND B(2) AND NOT(B(1)));
   H(5) <= (B(1) AND B(0)) OR (NOT(B(2)) AND B(1)) OR 
           (NOT(B(3)) AND NOT(B(2)) AND B(0));
   H(6) <= (B(2) AND B(1) AND B(0)) OR (NOT(B(3)) AND NOT(B(2)) AND NOT(B(1)));
END Behavior;